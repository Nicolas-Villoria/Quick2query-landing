---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import CTA from '../components/CTA.astro';
import HeroSection from '../components/HeroSection.jsx';
---

<Layout title="Schedulink - Features">
  <Header />
  <main>
    <!-- Hero Section -->
    <HeroSection 
      title="Powerful Features for"
      highlight="Medical Scheduling"
      subtitle="Streamline your healthcare practice with our comprehensive scheduling solution designed specifically for medical professionals."
      client:load
    />

    <!-- Interactive Feature Cards -->
    <section class="section relative z-10 overflow-hidden py-16">
      <div class="container mx-auto px-4">
        <div class="text-center mb-16">
          <span class="inline-block px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-medium text-sm mb-4">
            Core Features
          </span>
          <h2 class="text-3xl font-bold mb-4 text-gray-900">Everything You Need for Medical Scheduling</h2>
          <p class="text-gray-600 max-w-2xl mx-auto">
            Our comprehensive suite of features is designed to streamline your medical practice operations and improve patient care.
          </p>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          <!-- Feature Card 1: Smart Patient Booking -->
          <div class="feature-card group perspective">
            <div class="relative h-full transform-gpu transition-all duration-700 preserve-3d hover:rotate-y-180 cursor-pointer touch-action-card">
              <div class="absolute inset-0 backface-hidden">
                <div class="bg-white rounded-xl border-2 border-blue-100 hover:border-blue-300 transition-colors duration-300 shadow-lg hover:shadow-xl p-8 h-full flex flex-col items-center justify-center text-center">
                  <div class="w-16 h-16 rounded-xl bg-blue-100 flex items-center justify-center mb-6">
                    <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                    </svg>
                  </div>
                  <h3 class="text-xl font-semibold mb-3 text-gray-900">Smart Patient Booking</h3>
                  <p class="text-gray-600">Intelligent scheduling system that prevents double bookings and optimizes appointment slots.</p>
                </div>
              </div>
              <div class="absolute inset-0 backface-hidden rotate-y-180">
                <div class="bg-blue-600 rounded-xl p-8 h-full text-white flex flex-col items-center justify-center text-center">
                  <h3 class="text-xl font-semibold mb-4">How It Works</h3>
                  <p class="mb-4">Our AI-powered system analyzes appointment patterns to suggest optimal scheduling.</p>
                  <ul class="text-left space-y-2 mb-4">
                    <li>• Real-time availability checking</li>
                    <li>• Automated conflict resolution</li>
                    <li>• Buffer time management</li>
                    <li>• Multi-provider coordination</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Feature Card 2: Patient Management -->
          <div class="feature-card">
            <div class="bg-white rounded-xl border-2 border-green-100 hover:border-green-300 transition-colors duration-300 shadow-lg hover:shadow-xl p-8 h-full">
              <div class="w-16 h-16 rounded-xl bg-green-100 flex items-center justify-center mb-6">
                <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                </svg>
              </div>
              <h3 class="text-xl font-semibold mb-3 text-gray-900">Patient Management</h3>
              <p class="text-gray-600 mb-6">Comprehensive patient profiles with medical history, insurance details, and communication preferences.</p>
              
              <div class="bg-green-50 rounded-lg p-4 border border-green-200">
                <div class="flex items-center justify-between mb-2">
                  <span class="text-sm font-medium text-green-800">Patient Records</span>
                  <span class="text-xs text-green-600">Secure & HIPAA Compliant</span>
                </div>
                <div class="w-full bg-green-200 rounded-full h-2">
                  <div class="bg-green-600 h-2 rounded-full" style="width: 95%"></div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Feature Card 3: Automated Reminders -->
          <div class="feature-card">
            <div class="bg-white rounded-xl border-2 border-purple-100 hover:border-purple-300 transition-colors duration-300 shadow-lg hover:shadow-xl p-8 h-full">
              <div class="w-16 h-16 rounded-xl bg-purple-100 flex items-center justify-center mb-6">
                <svg class="w-8 h-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <h3 class="text-xl font-semibold mb-3 text-gray-900">Automated Reminders</h3>
              <p class="text-gray-600 mb-6">Reduce no-shows with customizable SMS, email, and phone call reminders.</p>
              
              <div class="space-y-3">
                <div class="flex items-center p-3 bg-purple-50 rounded-lg border border-purple-200">
                  <div class="w-3 h-3 bg-purple-600 rounded-full mr-3 animate-pulse"></div>
                  <span class="text-sm text-purple-800">SMS Reminder Sent</span>
                </div>
                <div class="flex items-center p-3 bg-gray-50 rounded-lg border border-gray-200">
                  <div class="w-3 h-3 bg-gray-400 rounded-full mr-3"></div>
                  <span class="text-sm text-gray-600">Email Reminder Pending</span>
                </div>
              </div>
            </div>
          </div>

          <!-- Feature Card 4: Multi-Location Support -->
          <div class="feature-card">
            <div class="bg-white rounded-xl border-2 border-orange-100 hover:border-orange-300 transition-colors duration-300 shadow-lg hover:shadow-xl p-8 h-full">
              <div class="w-16 h-16 rounded-xl bg-orange-100 flex items-center justify-center mb-6">
                <svg class="w-8 h-8 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                </svg>
              </div>
              <h3 class="text-xl font-semibold mb-3 text-gray-900">Multi-Location Support</h3>
              <p class="text-gray-600 mb-6">Manage multiple clinics, hospitals, or practice locations from a single dashboard.</p>
              
              <div class="grid grid-cols-2 gap-2">
                <div class="text-center p-2 bg-orange-50 rounded border border-orange-200">
                  <div class="text-lg font-bold text-orange-600">4</div>
                  <div class="text-xs text-orange-800">Locations</div>
                </div>
                <div class="text-center p-2 bg-orange-50 rounded border border-orange-200">
                  <div class="text-lg font-bold text-orange-600">12</div>
                  <div class="text-xs text-orange-800">Providers</div>
                </div>
              </div>
            </div>
          </div>

          <!-- Feature Card 5: Insurance Verification -->
          <div class="feature-card">
            <div class="bg-white rounded-xl border-2 border-teal-100 hover:border-teal-300 transition-colors duration-300 shadow-lg hover:shadow-xl p-8 h-full">
              <div class="w-16 h-16 rounded-xl bg-teal-100 flex items-center justify-center mb-6">
                <svg class="w-8 h-8 text-teal-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                </svg>
              </div>
              <h3 class="text-xl font-semibold mb-3 text-gray-900">Insurance Verification</h3>
              <p class="text-gray-600 mb-6">Automatically verify patient insurance coverage and benefits before appointments.</p>
              
              <div class="space-y-2">
                <div class="flex justify-between items-center p-2 bg-teal-50 rounded border border-teal-200">
                  <span class="text-sm text-teal-800">Coverage Status</span>
                  <span class="text-xs bg-teal-600 text-white px-2 py-1 rounded">Active</span>
                </div>
                <div class="flex justify-between items-center p-2 bg-teal-50 rounded border border-teal-200">
                  <span class="text-sm text-teal-800">Copay Amount</span>
                  <span class="text-xs text-teal-600">$25.00</span>
                </div>
              </div>
            </div>
          </div>

          <!-- Feature Card 6: Analytics & Reporting -->
          <div class="feature-card">
            <div class="bg-white rounded-xl border-2 border-red-100 hover:border-red-300 transition-colors duration-300 shadow-lg hover:shadow-xl p-8 h-full">
              <div class="w-16 h-16 rounded-xl bg-red-100 flex items-center justify-center mb-6">
                <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              </div>
              <h3 class="text-xl font-semibold mb-3 text-gray-900">Analytics & Reporting</h3>
              <p class="text-gray-600 mb-6">Comprehensive insights into practice performance, patient trends, and revenue metrics.</p>
              
              <div class="space-y-3">
                <div class="flex items-center justify-between">
                  <span class="text-sm text-gray-600">No-show Rate</span>
                  <span class="text-sm font-semibold text-green-600">↓ 15%</span>
                </div>
                <div class="flex items-center justify-between">
                  <span class="text-sm text-gray-600">Patient Satisfaction</span>
                  <span class="text-sm font-semibold text-blue-600">94%</span>
                </div>
                <div class="flex items-center justify-between">
                  <span class="text-sm text-gray-600">Revenue Growth</span>
                  <span class="text-sm font-semibold text-green-600">↑ 23%</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Interactive Demo Section -->
    <section class="section bg-gray-50 relative overflow-hidden py-16">
      <div class="container mx-auto px-4">
        <div class="text-center max-w-3xl mx-auto mb-16">
          <span class="inline-block px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-medium text-sm mb-4">
            Live Demo
          </span>
          <h2 class="text-3xl font-bold mb-6 text-gray-900">Experience Schedulink in Action</h2>
          <p class="text-gray-600">
            Try our interactive scheduling demo to see how easy it is to manage patient appointments and streamline your practice workflow.
          </p>
        </div>
        
        <div class="interactive-demo bg-white rounded-xl shadow-xl overflow-hidden border-2 border-gray-100 mx-auto max-w-4xl">
          <div class="demo-header bg-gray-100 p-4 flex items-center border-b-2 border-gray-200">
            <div class="flex space-x-2 mr-4">
              <div class="w-3 h-3 rounded-full bg-red-500"></div>
              <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
              <div class="w-3 h-3 rounded-full bg-green-500"></div>
            </div>
            <div class="flex-1 bg-white rounded-full h-8 flex items-center px-4 text-sm text-gray-500 border border-gray-300">
              schedulink.com/dashboard
            </div>
          </div>
          <div class="demo-content p-8 h-96 flex items-center justify-center relative bg-gradient-to-br from-blue-50 to-white">
            <div class="text-center">
              <div class="w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6 border-2 border-blue-200">
                <svg class="w-10 h-10 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
              </div>
              <h3 class="text-2xl font-bold mb-4 text-gray-900">Interactive Scheduling Demo</h3>
              <p class="text-gray-600 mb-6">Click anywhere in this area to simulate booking an appointment</p>
              <button id="demo-button" class="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-6 py-3 rounded-lg transition-colors duration-200 border-2 border-blue-600 hover:border-blue-700">
                Start Scheduling Demo
              </button>
            </div>
            <canvas id="demo-canvas" class="absolute inset-0 w-full h-full pointer-events-none opacity-50"></canvas>
          </div>
        </div>
      </div>
    </section>

    <!-- Feature Comparison -->
    <section class="section py-16">
      <div class="container mx-auto px-4">
        <div class="text-center max-w-3xl mx-auto mb-16">
          <span class="inline-block px-4 py-2 rounded-full bg-green-100 text-green-600 font-medium text-sm mb-4">
            Feature Comparison
          </span>
          <h2 class="text-3xl font-bold mb-6 text-gray-900">Why Choose Schedulink?</h2>
          <p class="text-gray-600">
            See how Schedulink compares to traditional scheduling methods and other medical software solutions.
          </p>
        </div>
        
        <div class="comparison-table-container overflow-x-auto pb-4">
          <table class="comparison-table w-full border-collapse min-w-[640px] bg-white rounded-xl shadow-lg overflow-hidden border-2 border-gray-200">
            <thead>
              <tr>
                <th class="p-4 text-left bg-gray-100 text-gray-900 rounded-tl-xl border-b-2 border-gray-200">Feature</th>
                <th class="p-4 text-center bg-gray-100 text-gray-900 border-b-2 border-gray-200">Paper/Phone</th>
                <th class="p-4 text-center bg-blue-100 text-blue-900 font-bold border-b-2 border-blue-200">Schedulink</th>
                <th class="p-4 text-center bg-gray-100 text-gray-900 rounded-tr-xl border-b-2 border-gray-200">Other Software</th>
              </tr>
            </thead>
            <tbody>
              <tr class="feature-row border-b border-gray-200">
                <td class="p-4 font-medium border-r border-gray-200">Automated Reminders</td>
                <td class="p-4 text-center border-r border-gray-200">
                  <svg class="w-5 h-5 mx-auto text-red-500" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"></path>
                  </svg>
                </td>
                <td class="p-4 text-center bg-blue-50 border-r border-blue-200">
                  <span class="inline-flex items-center justify-center text-blue-600 font-semibold">
                    <svg class="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"></path>
                    </svg>
                    SMS, Email & Voice
                  </span>
                </td>
                <td class="p-4 text-center text-yellow-600">Limited</td>
              </tr>
              <tr class="feature-row border-b border-gray-200">
                <td class="p-4 font-medium border-r border-gray-200">Insurance Verification</td>
                <td class="p-4 text-center border-r border-gray-200">
                  <span class="text-red-600 font-medium">Manual</span>
                </td>
                <td class="p-4 text-center bg-blue-50 border-r border-blue-200">
                  <span class="inline-flex items-center justify-center text-blue-600 font-semibold">
                    <svg class="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"></path>
                    </svg>
                    Automated
                  </span>
                </td>
                <td class="p-4 text-center text-yellow-600">Basic</td>
              </tr>
              <tr class="feature-row border-b border-gray-200">
                <td class="p-4 font-medium border-r border-gray-200">Multi-Location Support</td>
                <td class="p-4 text-center border-r border-gray-200">
                  <svg class="w-5 h-5 mx-auto text-red-500" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"></path>
                  </svg>
                </td>
                <td class="p-4 text-center bg-blue-50 border-r border-blue-200">
                  <span class="inline-flex items-center justify-center text-blue-600 font-semibold">
                    <svg class="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"></path>
                    </svg>
                    Unlimited
                  </span>
                </td>
                <td class="p-4 text-center text-yellow-600">Extra Cost</td>
              </tr>
              <tr class="feature-row border-b border-gray-200">
                <td class="p-4 font-medium border-r border-gray-200">Real-time Analytics</td>
                <td class="p-4 text-center border-r border-gray-200">
                  <svg class="w-5 h-5 mx-auto text-red-500" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"></path>
                  </svg>
                </td>
                <td class="p-4 text-center bg-blue-50 border-r border-blue-200">
                  <span class="inline-flex items-center justify-center text-blue-600 font-semibold">
                    <svg class="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"></path>
                    </svg>
                    Comprehensive
                  </span>
                </td>
                <td class="p-4 text-center text-yellow-600">Basic Reports</td>
              </tr>
              <tr class="feature-row">
                <td class="p-4 font-medium border-r border-gray-200">HIPAA Compliance</td>
                <td class="p-4 text-center border-r border-gray-200">
                  <span class="text-red-600 font-medium">Risk</span>
                </td>
                <td class="p-4 text-center bg-blue-50 border-r border-blue-200">
                  <span class="inline-flex items-center justify-center text-blue-600 font-semibold">
                    <svg class="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"></path>
                    </svg>
                    Certified
                  </span>
                </td>
                <td class="p-4 text-center text-green-600">
                  <svg class="w-5 h-5 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"></path>
                  </svg>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </section>

    <CTA></CTA>
  </main>
  <Footer />
</Layout>

<style>
  /* Grid Pattern Background */
  .bg-grid-pattern {
    background-image: 
      linear-gradient(to right, rgba(59, 130, 246, 0.1) 1px, transparent 1px),
      linear-gradient(to bottom, rgba(59, 130, 246, 0.1) 1px, transparent 1px);
    background-size: 40px 40px;
  }

  /* 3D Card Transformations */
  .perspective {
    perspective: 1000px;
  }
  
  .preserve-3d {
    transform-style: preserve-3d;
  }
  
  .backface-hidden {
    backface-visibility: hidden;
  }
  
  .rotate-y-180 {
    transform: rotateY(180deg);
  }
  
  /* Touch device support for 3D cards */
  @media (hover: none) {
    .touch-action-card {
      transition: none;
    }
    
    .touch-action-card:active {
      transform: rotateY(180deg);
    }
  }

  /* Feature cards hover effects */
  .feature-card {
    transition: transform 0.3s ease;
  }
  
  .feature-card:hover {
    transform: translateY(-5px);
  }

  /* Feature Row Animation */
  .feature-row {
    transition: all 0.3s ease;
  }
  
  .feature-row:hover {
    background-color: rgba(59, 130, 246, 0.05);
  }

  /* Interactive Demo */
  .interactive-demo {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    max-width: 100%;
  }
  
  .interactive-demo:hover {
    transform: translateY(-2px);
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }
  
  /* Mobile optimizations */
  @media (max-width: 640px) {
    .interactive-demo:hover {
      transform: none;
    }
    
    .comparison-table {
      font-size: 0.875rem;
    }
    
    .feature-card:hover {
      transform: none;
    }
    
    .feature-card {
      position: relative;
      min-height: 320px;
      margin-bottom: 2rem;
    }
    
    .preserve-3d {
      min-height: 320px;
    }
  }
  
  /* Animations */
  @keyframes slide-down {
    from {
      opacity: 0;
      transform: translateY(-30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes slide-up {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-slide-down {
    animation: slide-down 0.6s ease-out;
  }
  
  .animate-slide-up {
    animation: slide-up 0.6s ease-out;
  }
</style>

<script>
  // Store references to event listeners for cleanup
  const cleanupFunctions: Array<() => void> = [];

  // Function to initialize all interactive features
  function initializeFeatures() {
    // Initialize Parallax Effect
    initializeParallax();
    
    // Initialize Particle Animation
    initializeParticles();
    
    // Initialize Interactive Demo Canvas
    initializeCanvas();
    
    // Initialize touch support for 3D cards
    initializeTouchCards();
  }
  
  // Add touch support for 3D cards
  function initializeTouchCards() {
    const cards = document.querySelectorAll('.feature-card.perspective');
    
    cards.forEach(card => {
      const cardInner = card.querySelector('.preserve-3d');
      
      if (cardInner) {
        // 使用点击事件而不是touchstart，这样更可靠
        const handleClick = () => {
          if (window.matchMedia('(hover: none)').matches) {
            cardInner.classList.toggle('rotate-y-180');
          }
        };
        
        cardInner.addEventListener('click', handleClick);
        
        // Add cleanup function
        cleanupFunctions.push(() => {
          if (cardInner) {
            cardInner.removeEventListener('click', handleClick);
          }
        });
      }
    });
  }

  // Parallax Effect
  function initializeParallax() {
    const parallaxContainer = document.querySelector('.parallax-demo');
    if (parallaxContainer) {
      const layers = parallaxContainer.querySelectorAll('.parallax-layer');
      
      const handleMouseMove = (e: MouseEvent) => {
        const containerRect = parallaxContainer.getBoundingClientRect();
        const relX = e.clientX - containerRect.left;
        const relY = e.clientY - containerRect.top;
        
        const xPercent = relX / containerRect.width - 0.5;
        const yPercent = relY / containerRect.height - 0.5;
        
        layers.forEach((layer, index) => {
          const depth = index * 10;
          const moveX = xPercent * depth;
          const moveY = yPercent * depth;
          
          (layer as HTMLElement).style.transform = `translate3d(${moveX}px, ${moveY}px, 0)`;
        });
      };
      
      const handleTouchMove = (e: TouchEvent) => {
        if (e.touches.length > 0) {
          const containerRect = parallaxContainer.getBoundingClientRect();
          const touch = e.touches[0];
          const relX = touch.clientX - containerRect.left;
          const relY = touch.clientY - containerRect.top;
          
          const xPercent = relX / containerRect.width - 0.5;
          const yPercent = relY / containerRect.height - 0.5;
          
          layers.forEach((layer, index) => {
            const depth = index * 10;
            const moveX = xPercent * depth;
            const moveY = yPercent * depth;
            
            (layer as HTMLElement).style.transform = `translate3d(${moveX}px, ${moveY}px, 0)`;
          });
        }
      };
      
      const handleMouseLeave = () => {
        layers.forEach((layer) => {
          (layer as HTMLElement).style.transform = 'translate3d(0, 0, 0)';
        });
      };
      
      const handleTouchEnd = () => {
        layers.forEach((layer) => {
          (layer as HTMLElement).style.transform = 'translate3d(0, 0, 0)';
        });
      };
      
      // Use type assertion to fix TypeScript errors
      (parallaxContainer as HTMLElement).addEventListener('mousemove', handleMouseMove);
      (parallaxContainer as HTMLElement).addEventListener('touchmove', handleTouchMove);
      (parallaxContainer as HTMLElement).addEventListener('mouseleave', handleMouseLeave);
      (parallaxContainer as HTMLElement).addEventListener('touchend', handleTouchEnd);
      
      // Add cleanup function
      cleanupFunctions.push(() => {
        if (parallaxContainer) {
          (parallaxContainer as HTMLElement).removeEventListener('mousemove', handleMouseMove);
          (parallaxContainer as HTMLElement).removeEventListener('touchmove', handleTouchMove);
          (parallaxContainer as HTMLElement).removeEventListener('mouseleave', handleMouseLeave);
          (parallaxContainer as HTMLElement).removeEventListener('touchend', handleTouchEnd);
        }
      });
    }
  }

  // Particle Animation
  function initializeParticles() {
    const particlesContainer = document.querySelector('.particles-container');
    const particlesElement = document.querySelector('.particles');
    
    if (particlesContainer && particlesElement) {
      const createParticles = () => {
        particlesElement.innerHTML = '';
        const containerRect = particlesContainer.getBoundingClientRect();
        
        // Reduce particle count on mobile
        const particleCount = window.innerWidth < 768 ? 15 : 30;
        
        for (let i = 0; i < particleCount; i++) {
          const particle = document.createElement('div');
          particle.classList.add('particle');
          
          const size = Math.random() * 6 + 2;
          const x = Math.random() * containerRect.width;
          const y = Math.random() * containerRect.height;
          const duration = Math.random() * 2 + 1;
          const delay = Math.random() * 0.5;
          
          particle.style.cssText = `
            position: absolute;
            width: ${size}px;
            height: ${size}px;
            background-color: var(--tw-color-primary-400, #a78bfa);
            border-radius: 50%;
            left: ${x}px;
            top: ${y}px;
            opacity: 0;
            animation: float ${duration}s ease-in-out ${delay}s infinite alternate;
          `;
          
          particlesElement.appendChild(particle);
        }
      };
      
      createParticles();
      
      // Add touch support
      const handleTouch = () => {
        (particlesContainer as HTMLElement).classList.add('active');
        setTimeout(() => {
          (particlesContainer as HTMLElement).classList.remove('active');
        }, 1000);
      };
      
      (particlesContainer as HTMLElement).addEventListener('touchstart', handleTouch);
      
      // Add animation keyframes
      const style = document.createElement('style');
      style.textContent = `
        @keyframes float {
          0% {
            transform: translateY(0) translateX(0);
            opacity: 0;
          }
          50% {
            opacity: 0.8;
          }
          100% {
            transform: translateY(-20px) translateX(10px);
            opacity: 0;
          }
        }
        
        .particles-container.active .particles {
          opacity: 1;
        }
      `;
      document.head.appendChild(style);
      
      // Add cleanup function
      cleanupFunctions.push(() => {
        if (style && document.head.contains(style)) {
          document.head.removeChild(style);
        }
        
        if (particlesContainer) {
          (particlesContainer as HTMLElement).removeEventListener('touchstart', handleTouch);
        }
      });
    }
  }

  // Interactive Demo Canvas
  function initializeCanvas() {
    const canvas = document.getElementById('demo-canvas') as HTMLCanvasElement;
    const demoButton = document.getElementById('demo-button') as HTMLButtonElement;
    
    if (canvas && demoButton) {
      const ctx = canvas.getContext('2d');
      let isActive = false;
      let particles: Array<Particle> = [];
      let animationFrameId: number | null = null;
      
      // Resize canvas to match container
      const resizeCanvas = () => {
        const container = canvas.parentElement;
        if (container) {
          canvas.width = container.offsetWidth;
          canvas.height = container.offsetHeight;
        }
      };
      
      resizeCanvas();
      window.addEventListener('resize', resizeCanvas);
      
      // Particle class
      class Particle {
        x: number;
        y: number;
        size: number;
        color: string;
        speedX: number;
        speedY: number;
        life: number;
        
        constructor(x: number, y: number, color?: string) {
          this.x = x;
          this.y = y;
          this.size = Math.random() * 5 + 2;
          this.color = color || `hsl(${Math.random() * 60 + 240}, 70%, 60%)`;
          this.speedX = Math.random() * 3 - 1.5;
          this.speedY = Math.random() * 3 - 1.5;
          this.life = 100;
        }
        
        update() {
          this.x += this.speedX;
          this.y += this.speedY;
          this.life -= 1;
          
          if (this.size > 0.2) this.size -= 0.1;
        }
        
        draw() {
          if (ctx) {
            ctx.fillStyle = this.color;
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
            ctx.fill();
          }
        }
      }
      
      // Animation loop
      function animate() {
        if (!isActive) return;
        
        if (ctx) {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          
          for (let i = 0; i < particles.length; i++) {
            particles[i].update();
            particles[i].draw();
            
            if (particles[i].life <= 0 || particles[i].size <= 0.2) {
              particles.splice(i, 1);
              i--;
            }
          }
        }
        
        animationFrameId = requestAnimationFrame(animate);
      }
      
      // Event listeners
      const handleButtonClick = () => {
        isActive = !isActive;
        canvas.style.opacity = isActive ? '1' : '0.5';
        canvas.style.pointerEvents = isActive ? 'auto' : 'none';
        demoButton.textContent = isActive ? 'Deactivate Demo' : 'Activate Demo';
        
        if (isActive) {
          animate();
        } else if (animationFrameId) {
          cancelAnimationFrame(animationFrameId);
          animationFrameId = null;
        }
      };
      
      const handleMouseMove = (e: MouseEvent) => {
        if (!isActive) return;
        
        const rect = canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        for (let i = 0; i < 3; i++) {
          particles.push(new Particle(x, y));
        }
      };
      
      const handleClick = (e: MouseEvent) => {
        if (!isActive) return;
        
        const rect = canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        for (let i = 0; i < 20; i++) {
          particles.push(new Particle(x, y, `hsl(${Math.random() * 60 + 40}, 100%, 60%)`));
        }
      };
      
      demoButton.addEventListener('click', handleButtonClick);
      canvas.addEventListener('mousemove', handleMouseMove);
      canvas.addEventListener('click', handleClick);
      
      // Add cleanup function
      cleanupFunctions.push(() => {
        if (animationFrameId) {
          cancelAnimationFrame(animationFrameId);
        }
        
        window.removeEventListener('resize', resizeCanvas);
        
        if (demoButton) {
          demoButton.removeEventListener('click', handleButtonClick);
        }
        
        if (canvas) {
          canvas.removeEventListener('mousemove', handleMouseMove);
          canvas.removeEventListener('click', handleClick);
        }
        
        // Clear particles array
        particles = [];
      });
    }
  }
  
  // Initialize features on initial page load
  document.addEventListener('DOMContentLoaded', initializeFeatures);
  
  // Initialize features when navigating to this page with Astro's view transitions
  document.addEventListener('astro:page-load', initializeFeatures);
  
  // Cleanup when page is unloaded or before navigation
  document.addEventListener('astro:before-swap', () => {
    // Execute all cleanup functions
    cleanupFunctions.forEach(cleanup => cleanup());
    // Clear the array
    cleanupFunctions.length = 0;
  });
  
  // Also clean up on window unload as a fallback
  window.addEventListener('unload', () => {
    cleanupFunctions.forEach(cleanup => cleanup());
  });
</script>
